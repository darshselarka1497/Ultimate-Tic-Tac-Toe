{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\
Improvements could be made by recognizing the symmetry present in both the inner boards and the outer board, to avoid repeat computation by Monte Carlo search and alphabeta. Given the time, we would also try to improve the alphabeta heuristic evaluation function. Since this is not a solved game, we can only guess at optimal play. This is why we chose to use Monte Carlo, which is known to perform well on games like this, to judge our heuristic. That we might potentially solve the game one day using this code is an exciting proposition, and all we need is to work on the heuristic function.\
Since the game has a large branching factor, especially at the beginning of the game, we can speed up minimax and alphabeta by iterative deepening, which we did not have time to implement. \
\
We learned how much work is involved simply setting up the game and representation of the board, which took longer than expected. Once it was finished, though, we were able to implement our AI without changes to the underlying game structure, which allowed us to focus our efforts on the algorithms.\
\
\
NEED\
Brooklyn Working game runner for all player types, input are player types, returns who won\
Fisher Plot results\
	Alphabets-Minimax\
	alphabeta-alphabeta\
	minimax-minimax\
	random-random\
	minimax-random\
	alphabeta-random\
	MC-random\
	MC-minimax\
	MC-alphabeta\
	\
\
For tonight:\
4) Fisher\
5) Darsh\
9) All\
matplotlib\
\
For Saturday: \
Darsh: poster stuff/ppt outline \
\
\
Better Heuristic:\
\
\
\
}